{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	//emint widget short cuts
	"Emint Stateless widget": {
		"prefix": "esw",
		"body": [
			"import 'package:flutter/material.dart';",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/} extends StatelessWidget {",
			"   const ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}({super.key});",
			"",
			"   @override",
			"   Widget build(BuildContext context) {",
			"      return Scaffold(",
			"         appBar: EmintAppBar(),",
			"         body: Column(children: []),",
			"         );",
			"   }",
			"}",
		],
		"description": "Creates emint widget"
	},
	"State provider": {
		"prefix": "stateprovider",
		"body": [
			"final ${1} = StateProvider.autoDispose<int>((ref) => 0);"
		],
		"description": "State provider"
	},
	"Sized height": {
		"prefix": "szh",
		"body": [
			"const SizedBox(height: ${1}),"
		],
		"description": "Sized height"
	},
	"Sized width": {
		"prefix": "szw",
		"body": [
			"const SizedBox(width: ${1}),"
		],
		"description": "Sized width"
	},
	"Widget function": {
		"prefix": "widfn",
		"body": [
			"Widget ${1}()=>const SizedBox();"
		],
		"description": "Widget function"
	},
	"Widget builder function": {
		"prefix": "widfnb",
		"body": [
			"Widget ${1}()",
			"{",
			"return const SizedBox();",
			"}"
		],
		"description": "Widget function"
	},
	"Riverpod Api provider": {
		"prefix": "rap",
		"body": [
			"await ApiClient.makeCallWithCallback<${1}>(",
			"call: ,",
			"requestCallback: HttpRequestCallback<${1}>(",
			"  onError: ({errorModel}) => {},",
			"  onProgress: ({isLoading}) => {},",
			"  onSuccess: ({response}) {},",
			"));",
		],
		"description": "Widget function"
	},
	"Part statement": {
		"prefix": "pts",
		"body": [
			"part '${TM_FILENAME_BASE}.g.dart';",
		],
		"description": "Creates a filled-in part statement"
	},
	"Part 'Freezed' statement": {
		"prefix": "ptf",
		"body": [
			"part '${TM_FILENAME_BASE}.freezed.dart';",
		],
		"description": "Creates a filled-in freezed part statement"
	},
	"Freezed Data Class": {
		"prefix": "fdataclass",
		"body": [
			"@immutable",
			"abstract class ${1:DataClass} with _$${1:DataClass}{",
			"  const factory ${1:DataClass}(${2}) = _${1:DataClass};",
			"}"
		],
		"description": "Freezed Data Class"
	},
	"Freezed Union": {
		"prefix": "funion",
		"body": [
			"@immutable",
			"abstract class ${1:Union} with _$${1:Union}{",
			"  const factory ${1:Union}.${2}(${4}) = ${3};",
			"}"
		],
		"description": "Freezed Union"
	},
	"Freezed Union Case": {
		"prefix": "funioncase",
		"body": [
			"const factory ${1:Union}.${2}(${4}) = ${3};"
		],
		"description": "Freezed Union Case"
	},
	"Freezed factory": {
		"prefix": "ffromjson",
		"body": [
			"  factory ${1:${TM_FILENAME_BASE}}.fromJson(Map<String, dynamic> json) => _${1:${TM_FILENAME_BASE}}FromJson(json);"
		],
		"description": "Freezed Union Case"
	},
	"Etxt": {
		"prefix": "etxt",
		"body": [
			"Text(",
			"${1},",
			"style: EmintTextStyles.p2.w400.copyWith(color: EmintColors.neutral.shade100),),"
		],
		"description": "Freezed Union Case"
	},
	"fpi": {
		"prefix": "fpi",
		"body": [
			"final ${1} = FutureProvider.autoDispose<void>((ref) async {",
			"final client = ${2}(ref.watch(dioProvider));",
			"return await ApiClient.makeCallWithCallback<${3}>(",
			"call: client.${4} ,",
			"onError: (errorModel) {},",
			"onProgress: (isLoading){},",
			" onSuccess: (response) {},",
			");",
			"});"
		],
		"description": "Freezed Union Case"
	},
}